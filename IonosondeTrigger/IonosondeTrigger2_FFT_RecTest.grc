options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: Itrigger2_virtual
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Trigger Virtual
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 16.0]
    rotation: 0
    state: enabled

blocks:
- name: bin_high
  id: variable
  parameters:
    comment: ''
    value: '350'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1200, 52.0]
    rotation: 0
    state: enabled
- name: bin_low
  id: variable
  parameters:
    comment: ''
    value: '250'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1072, 52.0]
    rotation: 0
    state: enabled
- name: fftsz
  id: variable
  parameters:
    comment: ''
    value: '1024'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 52.0]
    rotation: 0
    state: enabled
- name: freq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Frequency
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: -samp_rate/2
    step: '100'
    stop: samp_rate/2
    value: 1e3
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 16.0]
    rotation: 0
    state: enabled
- name: movavg_length
  id: variable
  parameters:
    comment: ''
    value: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [704, 52.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 200e6/16
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 28.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: freq
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 248.0]
    rotation: 0
    state: enabled
- name: blocks_add_const_vxx_0
  id: blocks_add_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: (-1e6,)*bin_low+(0,)*(bin_high-bin_low)+(-1e6,)*(fftsz-bin_high)
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: fftsz
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 1044.0]
    rotation: 0
    state: true
- name: blocks_max_xx_0
  id: blocks_max_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '1'
    type: float
    vlen: fftsz
    vlen_out: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1184, 1044.0]
    rotation: 0
    state: true
- name: blocks_moving_average_xx_0
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: movavg_length
    max_iter: '4000'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 1/movavg_length
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1560, 1020.0]
    rotation: 0
    state: enabled
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 300.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    FFT_size: fftsz
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      import math\nfrom gnuradio import gr\nimport pmt\n\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ FFT_size=1024, sample_rate=25E6, frequency_low=10.9e6,\n                frequency_high=11.1e6):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Selective FFT Vector Averager',   # will show up\
      \ in GRC\n            in_sig=[(np.float32,FFT_size)],\n            out_sig=[np.float32]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.FFT_size\
      \ = FFT_size\n        self.sample_rate = sample_rate\n        self.frequency_low\
      \ = frequency_low+sample_rate/2\n        self.frequency_high = frequency_high+sample_rate/2\n\
      \        \n        # Calculate the bins we are interested in sampling\n    \
      \    self.bin_width = (self.sample_rate)/self.FFT_size\n        self.bin_low\
      \ = math.floor(self.frequency_low/self.bin_width)\n        print(\"bin low:\
      \ \", self.bin_low)\n        self.bin_high = math.ceil(self.frequency_high/self.bin_width)\n\
      \        print(\"bin high: \", self.bin_high)\n        #print(\"tesT\")\n  \
      \      \n        #Message Handling\n        self.portName = 'controlOut'\n \
      \       self.message_port_register_out(pmt.intern(self.portName))\n        \n\
      \n    def work(self, input_items, output_items):\n        # Loop through all\
      \ received vectors\n        #print(\"Input fft: \", len(input_items[0]))\n \
      \       for i in range(len(input_items[0])):\n            #print(\"bruh\")\n\
      \            output_items[0][i] = input_items[0][i][self.bin_low:self.bin_high].max()\n\
      \            PMT_msg = pmt.from_double(output_items[0][i])\n            self.message_port_pub(pmt.intern(self.portName),\
      \ PMT_msg)\n   \n        #print(\"Output fft: \", len(output_items[0]))\n  \
      \      #print(\"-----------------------\")\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    frequency_high: 800e3
    frequency_low: 500e3
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: samp_rate
  states:
    _io_cache: ('Selective FFT Vector Averager', 'blk', [('FFT_size', '1024'), ('sample_rate',
      '25000000.0'), ('frequency_low', '10900000.0'), ('frequency_high', '11100000.0')],
      [('0', 'float', 1024)], [('0', 'float', 1), ('controlOut', 'message', 1)], 'Embedded
      Python Block example - a simple multiply const', ['FFT_size', 'frequency_high',
      'frequency_low', 'sample_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2400, 548.0]
    rotation: 0
    state: disabled
- name: epy_block_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\" Ionosonde Trigger Block\n    By Jaden Keener, 2/5/23\n \
      \   \n    Last updated 2/12/23 12:55\n    - Added moving average functionality.\
      \ Now we shouldn't have to manually set\n      trigger threshold\n    \n   \
      \ This block records the raw SDR output when a strong enough input is \n   \
      \ provided. This block is meant to be used alongside a filter. The filter \n\
      \    should bandpass the trigger frequency, then go to an average power block\n\
      \    which then feeds into this blocks first input.\n    \n    Outputs are purely\
      \ debug.\n    \n    See __init__ for additional i/o information\n\"\"\"\n\n\
      import numpy as np\nimport datetime\nfrom gnuradio import gr\nimport pmt\n\n\
      class blk(gr.sync_block):  \n\n    def __init__(self, trigger_delta_dB=5, samp_rate\
      \ = 32E3, capture_window = 5): \n        \n        \"\"\" INPUTS/OUTPUTS:\n\
      \                input[0]: Raw Data from SDR\n                \n           \
      \     output[0]: debug state information\n                output[1]: debug timer\
      \ information\n                \n                msg[controlPort]: input from\
      \ custom FFT filter\n            \"\"\"\n        gr.sync_block.__init__(\n \
      \           self,\n            name='Ionosonde Trigger 2.0', \n            in_sig=[np.complex64],\n\
      \            out_sig=[np.float32, np.float32]\n        )\n        \n       \
      \ self.trigger_Power = trigger_delta_dB\n        self.samp_rate = samp_rate\n\
      \        self.capture_window = capture_window\n        # timer max is calculated\
      \ as sample rate * capture window in seconds.\n        self.timerMax = self.timer\
      \ = self.samp_rate * self.capture_window\n        self.writing = False\n   \
      \     \n        # Message Handling\n        self.controlPortName = 'controlIn'\n\
      \        self.message_port_register_in(pmt.intern(self.controlPortName))\n \
      \       self.set_msg_handler(pmt.intern(self.controlPortName), self.handle_msg)\n\
      \       \n        self.control = False # default for control\n        self.controlLast\
      \ = 10e3\n       \n    def handle_msg(self, msg):\n        controlIn = pmt.to_double(msg)\n\
      \        \n        if controlIn > self.controlLast+self.trigger_Power:\n   \
      \         self.control = True\n        \n        self.controlLast = controlIn\n\
      \       \n       \n    def work(self, input_items, output_items):\n        \n\
      \        # Check if we are writing\n        if self.writing:\n            #\
      \ If we are and we still have time on the clock\n            if self.timer <\
      \ self.timerMax:\n                # Then write data to file\n              \
      \  self.file.write(input_items[0][:])\n                self.timer += len(input_items[0])\n\
      \                output_items[0][:] = 2\n            else:\n               \
      \ # Otherwise close the file and reset flags\n                self.file.close()\n\
      \                self.writing = False\n                self.control = False\n\
      \                output_items[0][:] = 0\n        \n        # If not writing,\
      \ do we have high power on trigger?\n        elif self.control:\n          \
      \  # Set status variables\n            self.writing = True\n            self.timer\
      \ = 0\n            output_items[0][:] = 1\n            \n            # Open\
      \ new file and do first write\n            self.filename = '{date:%Y%m%d_%H%M%S}.chirp'.format(date=datetime.datetime.now())\n\
      \            self.file = open(self.filename, \"ab\")\n            self.file.write(input_items[0][:])\n\
      \        # Show debug state of none\n        else:\n            output_items[0][:]\
      \ = 0\n        \n        # For debugging timer\n        output_items[1][:] =\
      \ self.timer\n        \n        # gnuradio needs this return\n        return\
      \ len(output_items[0])\n"
    affinity: ''
    alias: ''
    capture_window: '5'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    trigger_delta_dB: '300'
  states:
    _io_cache: '(''Ionosonde Trigger 2.0'', ''blk'', [(''trigger_delta_dB'', ''5''),
      (''samp_rate'', ''32000.0''), (''capture_window'', ''5'')], [(''0'', ''complex'',
      1), (''controlIn'', ''message'', 1)], [(''0'', ''float'', 1), (''1'', ''float'',
      1)], '' INPUTS/OUTPUTS:\n                input[0]: Raw Data from SDR\n                \n                output[0]:
      debug state information\n                output[1]: debug timer information\n                \n                msg[controlPort]:
      input from custom FFT filter\n            '', [''capture_window'', ''samp_rate''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2080, 1200.0]
    rotation: 0
    state: disabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import math
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1592, 52.0]
    rotation: 0
    state: true
- name: logpwrfft_x_0
  id: logpwrfft_x
  parameters:
    affinity: ''
    alias: ''
    average: 'False'
    avg_alpha: '1.0'
    comment: ''
    fft_size: fftsz
    frame_rate: '30'
    maxoutbuf: '0'
    minoutbuf: '0'
    ref_scale: '2'
    sample_rate: samp_rate
    shift: 'True'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 992.0]
    rotation: 0
    state: true
- name: qtgui_number_sink_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '""'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1848, 1020.0]
    rotation: 0
    state: true
- name: qtgui_number_sink_1_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '3'
    min: '-1'
    name: '"TrigOut"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2528, 1116.0]
    rotation: 0
    state: disabled
- name: qtgui_number_sink_1_0_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'True'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '3'
    min: '-1'
    name: '"TFFTOut"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2576, 276.0]
    rotation: 0
    state: disabled
- name: qtgui_number_sink_1_1_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: 200E3
    min: '0'
    name: '"Timer"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2528, 1260.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Raw"'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 1364.0]
    rotation: 0
    state: enabled
- name: qtgui_vector_sink_f_0
  id: qtgui_vector_sink_f
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    ref_level: '0'
    showports: 'False'
    update_time: '0.10'
    vlen: '1024'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    x_axis_label: '"x-Axis"'
    x_start: '0'
    x_step: '1.0'
    x_units: '""'
    y_axis_label: '"y-Axis"'
    y_units: '""'
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 836.0]
    rotation: 0
    state: true
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: signal
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 220.0]
    rotation: 0
    state: enabled
- name: virtual_source_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: signal
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1784, 1380.0]
    rotation: 0
    state: disabled

connections:
- [analog_sig_source_x_0, '0', blocks_throttle_0, '0']
- [blocks_add_const_vxx_0, '0', blocks_max_xx_0, '0']
- [blocks_max_xx_0, '0', blocks_moving_average_xx_0, '0']
- [blocks_moving_average_xx_0, '0', qtgui_number_sink_0, '0']
- [blocks_throttle_0, '0', logpwrfft_x_0, '0']
- [blocks_throttle_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_throttle_0, '0', virtual_sink_0, '0']
- [epy_block_0, '0', qtgui_number_sink_1_0_0, '0']
- [epy_block_0, controlOut, epy_block_1_0, controlIn]
- [epy_block_1_0, '0', qtgui_number_sink_1_0, '0']
- [epy_block_1_0, '1', qtgui_number_sink_1_1_0, '0']
- [logpwrfft_x_0, '0', blocks_add_const_vxx_0, '0']
- [logpwrfft_x_0, '0', qtgui_vector_sink_f_0, '0']
- [virtual_source_0_0, '0', epy_block_1_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.5.0
