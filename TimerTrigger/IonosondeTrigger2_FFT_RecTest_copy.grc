options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: Itrigger2_virtual
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Trigger Virtual
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 16.0]
    rotation: 0
    state: enabled

blocks:
- name: bin_high
  id: variable
  parameters:
    comment: ''
    value: int((filt_high-(fc-samp_rate/2))/samp_rate*fftsz)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [968, 1132.0]
    rotation: 0
    state: enabled
- name: bin_low
  id: variable
  parameters:
    comment: ''
    value: int((filt_low-(fc-samp_rate/2))/samp_rate*fftsz)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 1132.0]
    rotation: 0
    state: enabled
- name: fc
  id: variable
  parameters:
    comment: ''
    value: 14.25e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1200, 20.0]
    rotation: 0
    state: enabled
- name: fftsz
  id: variable
  parameters:
    comment: ''
    value: '1024'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 52.0]
    rotation: 0
    state: enabled
- name: filt_high
  id: variable
  parameters:
    comment: ''
    value: 9.1e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1280, 108.0]
    rotation: 0
    state: enabled
- name: filt_low
  id: variable
  parameters:
    comment: ''
    value: 9e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 108.0]
    rotation: 0
    state: enabled
- name: freq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Frequency
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: -samp_rate/2
    step: '100'
    stop: samp_rate/2
    value: 1e3
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 16.0]
    rotation: 0
    state: enabled
- name: movavg_length
  id: variable
  parameters:
    comment: ''
    value: '10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [704, 52.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 200e6/16
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 28.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: 500e3
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [128, 328.0]
    rotation: 0
    state: enabled
- name: blocks_add_const_vxx_0
  id: blocks_add_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: (-1e16,)*bin_low+(0,)*(bin_high-bin_low)+(-1e6,)*(fftsz-bin_high)
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: fftsz
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 1044.0]
    rotation: 0
    state: true
- name: blocks_max_xx_0
  id: blocks_max_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '1'
    type: float
    vlen: fftsz
    vlen_out: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1184, 1044.0]
    rotation: 0
    state: enabled
- name: blocks_moving_average_xx_0
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: movavg_length
    max_iter: '4000'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 1/movavg_length
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1568, 1020.0]
    rotation: 0
    state: enabled
- name: blocks_moving_average_xx_0_0
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: movavg_length*10
    max_iter: '4000'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 1/(movavg_length*10)
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1880, 1180.0]
    rotation: 0
    state: enabled
- name: blocks_throttle_0_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 380.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nLocal Chirp\nBy Jaden Keener, Last updated 3/27/23\n\n\
      Generates a local tone that sweeps the spectrum at the specified slope\n\n\"\
      \"\"\n\nimport numpy as np\nimport pmt\nfrom gnuradio import gr\n\n\nclass blk(gr.sync_block):\
      \  \n\n    def __init__(self, slope=100e3, samp_rate=200e6/12, offset = 10e3):\n\
      \        gr.sync_block.__init__(\n            self,\n            name='Local\
      \ Chirp Test 1.0',   \n            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n\
      \        )\n\n        self.slope = slope  \n        self.fs = samp_rate\n  \
      \      self.offset = offset\n        self.debug = False\n        \n        self.lastT\
      \ = 0\n        self.lastF = -self.fs/2 + self.offset\n        self.spanF = self.lastF\
      \ + self.fs/2 - self.offset\n        self.dt = 1/self.fs\n        self.df =\
      \ self.slope/self.fs/2 #why /2 ?? I have no idea, but it has to be\n       \
      \ # over 2 has something to do with span of f not being -fs/2 to fs/2 but\n\
      \        # just fs..???\n        \n        \n        self.controlPortName =\
      \ 'controlIn'\n        self.message_port_register_in(pmt.intern(self.controlPortName))\n\
      \        self.set_msg_handler(pmt.intern(self.controlPortName), self.handle_msg)\n\
      \        self.control = False\n        \n            \n        \n    def handle_msg(self,\
      \ msg):\n        controlIn = pmt.to_bool(msg)\n        \n        if controlIn\
      \ > self.controlLast+self.trigger_Power:\n            self.control = True\n\
      \        \n        self.controlLast = controlIn\n        \n    def work(self,\
      \ input_items, output_items):\n    \n        # Find number of samples on this\
      \ call\n        n = len(input_items[0]) \n\n        # If we havent progged the\
      \ whole spectrum\n        if self.lastF <= self.offset/2: # WHY OFFSET/2 ???????????\
      \ IDK\n        \n            # Calculate the values of T and F we prog to on\
      \ this call\n            newT = self.dt*n + self.lastT\n            newF = self.df*n\
      \ + self.lastF\n            \n            # Make sure arrays are correct size.\
      \ Can get slightly offsize due\n            # to float precision errors\n  \
      \          t = np.resize(np.arange(self.lastT, newT, self.dt), n)\n        \
      \    f = np.resize(np.arange(self.lastF, newF, self.df), n)\n            \n\
      \            # Output is a complex exponential (I/Q)\n            output_items[0][:]\
      \ = np.exp(1j*2*np.pi*f*t)\n            \n            # Update bookmarks\n \
      \           self.lastT = newT\n            self.lastF = newF\n        \n   \
      \     # Otherwise do nothing\n        else:\n            output_items[0][:]\
      \ = input_items[0] * 0;\n            if self.debug:\n                self.debug\
      \ = False\n                raise ValueError(self.lastF)\n            \n    \
      \    \n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    samp_rate: samp_rate
    slope: 100e3
  states:
    _io_cache: ('Local Chirp Test 1.0', 'blk', [('slope', '100000.0'), ('samp_rate',
      '16666666.666666666'), ('offset', '10000.0')], [('0', 'complex', 1), ('controlIn',
      'message', 1)], [('0', 'complex', 1)], '', ['offset', 'slope'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [152, 1032.0]
    rotation: 0
    state: true
- name: epy_block_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\" Ionosonde Trigger Block\n    By Jaden Keener, 2/5/23\n \
      \   \n    Last updated 2/12/23 12:55\n    - Added moving average functionality.\
      \ Now we shouldn't have to manually set\n      trigger threshold\n    \n   \
      \ This block records the raw SDR output when a strong enough input is \n   \
      \ provided. This block is meant to be used alongside a filter. The filter \n\
      \    should bandpass the trigger frequency, then go to an average power block\n\
      \    which then feeds into this blocks first input.\n    \n    Outputs are purely\
      \ debug.\n    \n    See __init__ for additional i/o information\n\"\"\"\n\n\
      import numpy as np\nimport datetime\nfrom gnuradio import gr\nimport pmt\n\n\
      class blk(gr.sync_block):  \n\n    def __init__(self, trigger_delta_dB=5, samp_rate\
      \ = 32E3, capture_window = 5): \n        \n        \"\"\" INPUTS/OUTPUTS:\n\
      \                input[0]: Raw Data from SDR\n                \n           \
      \     output[0]: debug state information\n                output[1]: debug timer\
      \ information\n                \n                msg[controlPort]: input from\
      \ custom FFT filter\n            \"\"\"\n        gr.sync_block.__init__(\n \
      \           self,\n            name='Ionosonde Trigger 2.0', \n            in_sig=[np.complex64,\
      \ np.float32, np.float32],\n            out_sig=[np.float32, np.float32]\n \
      \       )\n        \n        self.trigger_Power = trigger_delta_dB\n       \
      \ self.samp_rate = samp_rate\n        self.capture_window = capture_window\n\
      \        # timer max is calculated as sample rate * capture window in seconds.\n\
      \        self.timerMax = self.timer = self.samp_rate * self.capture_window\n\
      \        self.writing = False\n        \n        # Message Handling\n      \
      \  #self.controlPortName = 'controlIn'\n        #self.message_port_register_in(pmt.intern(self.controlPortName))\n\
      \        #self.set_msg_handler(pmt.intern(self.controlPortName), self.handle_msg)\n\
      \       \n        self.control = False # default for control\n        self.controlLast\
      \ = 10e3\n       \n    def handle_msg(self, msg):\n        controlIn = pmt.to_double(msg)\n\
      \        \n        if controlIn > self.controlLast+self.trigger_Power:\n   \
      \         self.control = True\n        \n        self.controlLast = controlIn\n\
      \       \n       \n    def work(self, input_items, output_items):\n        \n\
      \        # Check if we are writing\n        if self.writing:\n            #\
      \ If we are and we still have time on the clock\n            if self.timer <\
      \ self.timerMax:\n                # Then write data to file\n              \
      \  self.file.write(input_items[0][:])\n                self.timer += len(input_items[0])\n\
      \                output_items[0][:] = 2\n            else:\n               \
      \ # Otherwise close the file and reset flags\n                self.file.close()\n\
      \                self.writing = False\n                self.control = False\n\
      \                output_items[0][:] = 0\n        \n        # If not writing,\
      \ do we have high power on trigger?\n        elif np.any(input_items[1] > input_items[2]+self.trigger_power):\n\
      \            # Set status variables\n            raise ValueError(\"Trigger\
      \ Debug\")\n            self.writing = True\n            self.timer = 0\n  \
      \          output_items[0][:] = 1\n            \n            # Open new file\
      \ and do first write\n            self.filename = '{date:%Y%m%d_%H%M%S}.chirp'.format(date=datetime.datetime.now())\n\
      \            self.file = open(self.filename, \"ab\")\n            self.file.write(input_items[0][:])\n\
      \        # Show debug state of none\n        else:\n            output_items[0][:]\
      \ = 0\n        \n        # For debugging timer\n        output_items[1][:] =\
      \ self.timer\n        \n        # gnuradio needs this return\n        return\
      \ len(output_items[0])\n"
    affinity: ''
    alias: ''
    capture_window: '5'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    trigger_delta_dB: '300'
  states:
    _io_cache: '(''Ionosonde Trigger 2.0'', ''blk'', [(''trigger_delta_dB'', ''5''),
      (''samp_rate'', ''32000.0''), (''capture_window'', ''5'')], [(''0'', ''complex'',
      1), (''1'', ''float'', 1), (''2'', ''float'', 1)], [(''0'', ''float'', 1), (''1'',
      ''float'', 1)], '' INPUTS/OUTPUTS:\n                input[0]: Raw Data from
      SDR\n                \n                output[0]: debug state information\n                output[1]:
      debug timer information\n                \n                msg[controlPort]:
      input from custom FFT filter\n            '', [''capture_window'', ''samp_rate''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2240, 1036.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import math
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1592, 52.0]
    rotation: 0
    state: true
- name: logpwrfft_x_0
  id: logpwrfft_x
  parameters:
    affinity: ''
    alias: ''
    average: 'False'
    avg_alpha: '1.0'
    comment: ''
    fft_size: fftsz
    frame_rate: '30'
    maxoutbuf: '0'
    minoutbuf: '0'
    ref_scale: '2'
    sample_rate: samp_rate
    shift: 'True'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 992.0]
    rotation: 0
    state: true
- name: qtgui_number_sink_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '"average"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1864, 660.0]
    rotation: 0
    state: true
- name: qtgui_number_sink_0_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '"super avg"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2312, 1220.0]
    rotation: 0
    state: enabled
- name: qtgui_number_sink_0_1
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'True'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '"state"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2592, 884.0]
    rotation: 0
    state: enabled
- name: qtgui_number_sink_0_1_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'True'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '"timer"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2592, 1052.0]
    rotation: 0
    state: enabled
- name: qtgui_vector_sink_f_0
  id: qtgui_vector_sink_f
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    ref_level: '0'
    showports: 'False'
    update_time: '0.10'
    vlen: '1024'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    x_axis_label: '"x-Axis"'
    x_start: '0'
    x_step: '1.0'
    x_units: '""'
    y_axis_label: '"y-Axis"'
    y_units: '""'
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 836.0]
    rotation: 0
    state: true
- name: qtgui_vector_sink_f_0_0
  id: qtgui_vector_sink_f
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    ref_level: '0'
    showports: 'False'
    update_time: '0.10'
    vlen: '1024'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    x_axis_label: '"x-Axis"'
    x_start: '0'
    x_step: '1.0'
    x_units: '""'
    y_axis_label: '"y-Axis"'
    y_units: '""'
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1224, 1244.0]
    rotation: 0
    state: true
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: sig
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 380.0]
    rotation: 0
    state: true
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: sig
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1880, 924.0]
    rotation: 0
    state: enabled

connections:
- [analog_sig_source_x_0, '0', blocks_throttle_0_0, '0']
- [blocks_add_const_vxx_0, '0', blocks_max_xx_0, '0']
- [blocks_add_const_vxx_0, '0', qtgui_vector_sink_f_0_0, '0']
- [blocks_max_xx_0, '0', blocks_moving_average_xx_0, '0']
- [blocks_moving_average_xx_0, '0', blocks_moving_average_xx_0_0, '0']
- [blocks_moving_average_xx_0, '0', epy_block_1_0, '1']
- [blocks_moving_average_xx_0, '0', qtgui_number_sink_0, '0']
- [blocks_moving_average_xx_0_0, '0', epy_block_1_0, '2']
- [blocks_moving_average_xx_0_0, '0', qtgui_number_sink_0_0, '0']
- [blocks_throttle_0_0, '0', epy_block_1, '0']
- [blocks_throttle_0_0, '0', virtual_sink_0, '0']
- [epy_block_1, '0', logpwrfft_x_0, '0']
- [epy_block_1_0, '0', qtgui_number_sink_0_1, '0']
- [epy_block_1_0, '1', qtgui_number_sink_0_1_0, '0']
- [logpwrfft_x_0, '0', blocks_add_const_vxx_0, '0']
- [logpwrfft_x_0, '0', qtgui_vector_sink_f_0, '0']
- [virtual_source_0, '0', epy_block_1_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.5.0
